#!/usr/bin/env bash
set -e
IFS=$'\t\n'

# sane defaults
SELE_TAG="latest"
CHROME_COUNT="1"
FIREFOX_COUNT="1"
WITH_VIDEOS="true"
BUILD_NUMBER="0"
SELE_IMAGE=elgalu/selenium
status=101 #assumed it failed unless proved wrong
# to count minutes of usage
start_time=$(date +%s)

TOOLS_DIR="/tools"

# Exit all child processes properly
shutdown () {
  echo ""
  echo "-----------------"
  echo "--- TESTS END ---"
  echo "-----------------"

  # shutdown tests if still running
  echo "INFO: Shutting down the test command..."
  docker stop ${TEST_CONTAINER} >/dev/null 2>&1 || true
  docker rm ${TEST_CONTAINER} >/dev/null 2>&1 || true

  # shutdown selenium
  echo "INFO: Shutting down selenium..."
  if [ "${WITH_VIDEOS}" == "true" ]; then
      if ! docker exec ${SEL_CONTAINER} stop-video; then
          echo "WARN: Could not cleanly stop Selenium video recording!" >&2
      fi
      mkdir -p ./videos
      docker cp ${SEL_CONTAINER}:/videos/. videos
  fi
  if ! docker stop ${SEL_CONTAINER}; then
      echo "WARN: Could not cleanly stop Selenium service!" >&2
  fi
  if ! docker rm ${SEL_CONTAINER}; then
      echo "WARN: Could not cleanly rm Selenium container!" >&2
  fi
  if [ "${WITH_VIDEOS}" == "true" ]; then
      if ! ls -la ./videos/; then
          echo "WARN: Videos should but were not transferred!" >&2
      fi
  fi

  echo "-- RESULT: Tests exit code=${status}"

  # give correct feedback
  exit ${status}
}

# Run function shutdown() when this process a killer signal
trap shutdown SIGHUP SIGTERM SIGINT

# parse cli options http://stackoverflow.com/a/14203146/511069
for i in "$@"; do
    case $i in
        -t=*|--tag=*)
        SELE_TAG="${i#*=}"
        shift # past argument=value
        ;;
        -c=*|--chrome-count=*)
        CHROME_COUNT="${i#*=}"
        shift # past argument=value
        ;;
        -f=*|--firefox-count=*)
        FIREFOX_COUNT="${i#*=}"
        shift # past argument=value
        ;;
        --no-videos)
        WITH_VIDEOS="false"
        shift # past argument with no value
        ;;
        *)
                # unknown option
        ;;
    esac
done

SEL_CONTAINER="grid_${BUILD_NUMBER}"
TEST_CONTAINER="test_${BUILD_NUMBER}"
TOTAL_COUNT=$((${CHROME_COUNT} + ${FIREFOX_COUNT}))

if [ $# -lt 1 ]; then
    echo "Usage:  $0 [--tag=latest] [--chrome-count=1] [--firefox-count=1] <toolchain> [<toolchain-docker-opts>] -- <toolchain-command>" >&2
    echo "    Simple example:   $0 :toolchain-frontend -- gulp ui-test" >&2
    echo "    Advanced example: $0 --chrome-count=2 --firefox-count=2 :toolchain-frontend -- gulp ui-test" >&2
    #usage error arbitrary error number
    status=202
    exit $status
fi

TEST_DOCKER_IMAGE=$1
# remove first 1 args, we saved them leaving us with docker opts and command for the run tool
shift 1

# clean-up old Docker container
docker rm -fv ${SEL_CONTAINER} 2>/dev/null || true
# clean-up old Docker containers
docker rm -ff /test_0 2>/dev/null || true
docker rm -ff test_0 2>/dev/null || true

# Pull the toolchain so doesn't take test running time
${TOOLS_DIR}/run ${TEST_DOCKER_IMAGE} -- \
echo "Pull the toolchain so doesn't take testing time"

# Try to pull up to 3 times to avoid:
#  https://github.com/docker/docker/issues/25711#issuecomment-240055670
docker pull ${SELE_IMAGE}:${SELE_TAG} ||
docker pull ${SELE_IMAGE}:${SELE_TAG} ||
docker pull ${SELE_IMAGE}:${SELE_TAG}

# start docker-selenium
echo "INFO: Starting Selenium..."
docker run -d --name=${SEL_CONTAINER} \
  --shm-size=2g \
  -e USER_ID=$(id -u) \
  -e SELENIUM_HUB_PORT="4444" \
  -e VIDEO=${WITH_VIDEOS} \
  -e MAX_INSTANCES=${TOTAL_COUNT} \
  -e MAX_SESSIONS=${TOTAL_COUNT} \
  ${SELE_IMAGE}:${SELE_TAG}

# wait
sleep 2
docker logs ${SEL_CONTAINER}

# wait until selenium has bootstrapped
docker exec ${SEL_CONTAINER} wait_all_done 120s

start_time=$(date +%s)

# execute real command
echo ""
echo "-------------------"
echo "--- TESTS START ---"
echo "-------------------" && echo ""

# set +e
${TOOLS_DIR}/run ${TEST_DOCKER_IMAGE} \
  --name=${TEST_CONTAINER} \
  --net=container:${SEL_CONTAINER} \
  -e SELENIUM_URL="http://localhost:4444/wd/hub" \
  $@ && status=$? || status=$?

shutdown
